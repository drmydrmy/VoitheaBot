import logging
import db
import re

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.deep_linking import get_start_link
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InputFile



API_TOKEN = '5825286084:AAFFqKujAgFN9MuwdWGjmmYFji8XRbtysTQ'
ADMINS_LIMIT = 6
ORDERS_LIMIT = 4

logging.basicConfig(level=logging.INFO)

def create_main_keyboard(user_data):
    welcome_btns_text = ('üìù–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å-—É—Å–ª—É–≥.', '‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.', 'üì©–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.',  '‚ú®–°–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.')
    if user_data['payment_method'] == '' and user_data['payment_data'] == '':
        welcome_btns_text = welcome_btns_text + ('üí∏–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.',)
    else:
        welcome_btns_text = welcome_btns_text + ('üí∏–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.',)
    welcome_btns_text = welcome_btns_text + ('‚ùì–ü–æ–º–æ—â—å',)
    if db.check_user_is_admin(user_data['user_id']):
        welcome_btns_text = welcome_btns_text + ('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è',)
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(*(types.KeyboardButton(text) for text in welcome_btns_text))
    return keyboard_markup

def create_admin_keyboard(user_data):
    welcome_btns_text = ('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã')
    if db.get_super_admin_value(user_data['user_id']) == 1:
        welcome_btns_text = welcome_btns_text + ('–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö')
    welcome_btns_text = welcome_btns_text + ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',)
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(*(types.KeyboardButton(text) for text in welcome_btns_text))
    return keyboard_markup

def divide_money(sum, system_percent):
    system_sum = sum * (system_percent / 100)
    sum_for_boss_and_first = system_sum * (18.75 / 100)
    inviter_sum = system_sum * (6.25 / 100)
    others_sum = system_sum * (75 / 100)
    sum_dict = {
        'sum_for_boss_and_first' : sum_for_boss_and_first,
        'inviter_sum' : inviter_sum,
        'others_sum' : others_sum
    }
    return(sum_dict)

# Storage for throttle control
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# States
class payment(StatesGroup):
    method = State()
    data = State()

class payment_change(StatesGroup):
    data = State()
    method = State()

class add_inviter(StatesGroup):
    inviter = State()

class add_order(StatesGroup):
    name = State()
    executor = State()
    client = State()
    handler = State()
    system_percent = State()
    executor_cost = State()

class add_worker(StatesGroup):
    username = State()
    user_data = State()
    is_superadmin = State()

class change_info(StatesGroup):
    username = State()
    info = State()

class delete_user(StatesGroup):
    username = State()
    confirmation = State()

class view_order(StatesGroup):
    view = State()

class delete_order(StatesGroup):
    order_id = State()
    confirmation = State()

class change_link(StatesGroup):
    link = State()

change_page_callback = CallbackData("text", "action", "offset")
view_price_callback = CallbackData("text", "action", "item_name")

# Start command handler
@dp.message_handler(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        await dp.throttle('start', rate=2)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        cur_user_data = db.get_user_data(message.from_user.id)
        args = message.get_args()
        if args is None:
            args = ''
        if args != '':
            if (args.isdigit() or db.alias_to_id(args) != -1) and cur_user_data['invited_by'] is None:
                if args.isdigit():
                    if db.check_user_exists(int(args)):
                        if not (db.check_inviter_is_invited(message.from_user.id, int(args))):
                            if not (message.from_user.id == int(args)):
                                db.add_user_invited_by(int(args), message.from_user.id)
                                await message.answer("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º")
                            else:
                                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è")
                        else:
                            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ—é—â–∏–π —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤–∞–º–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º")
                    else:
                        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
                else:
                    if not (db.check_inviter_is_invited(message.from_user.id, db.alias_to_id(args))):
                            if not (message.from_user.id == db.alias_to_id(args)):
                                db.add_user_invited_by(db.alias_to_id(args), message.from_user.id)
                                await message.answer("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º")
                            else:
                                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è")
                    else:
                            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ—é—â–∏–π —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤–∞–º–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º")
            elif not (cur_user_data['invited_by'] is None):
                await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")
            elif not args.isdigit() and args != '':
                await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_main_keyboard(cur_user_data)
        join_status = await bot.get_chat_member(-1001880681466, message.from_user.id)
        if join_status['status'] == "member" or join_status['status'] == "administrator" or join_status['status'] == "creator":
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=keyboard_markup)
            await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É —Å—Å—ã–ª–∫—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        else:
            decline_keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
            decline_keyboard_markup.add(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
            await message.answer('–ú—ã —è–≤–ª—è–µ–º—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º OPOM VOITHEIA.\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª:\nhttps://t.me/OPOM_VOITHEA', reply_markup=decline_keyboard_markup)
        # DONE Check for integrity of deep link and inviter
        # DONE Increment people invited counter after checking the inviter
        # DONE Add explanations
        # DONE Add info about the inviter
        # DONE Add id checking
        # DONE Add completion message
        # DONE Check if payment information exists if no notify
        # DONE Think up an administration system
        # DONE Additional checks on adding an order
        # Invited can't have inviter as his own invited
        # Inviter can't have an invited as his own inviter
        

# Help handler
# @dp.message_handler(text = "–ü–æ–º–æ—â—å")
# async def send_help(message: types.Message):
#     try:
#         await dp.throttle('start', rate=1)
#     except Throttled:
#         await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
#     else:
#         await message.answer("–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏")

@dp.message_handler(text = '‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.')
async def view_contact_data(message: types.Message):
    await message.reply("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–∏—à–∏—Ç–µ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º: \n@VOITHEIA_MSK")

# @dp.message_handler(text = "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ")
# async def check_inviter_data(message: types.Message):
    # try:
    #     await dp.throttle('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ', rate=1)
    # except Throttled:
    #     await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    # else:
    #     cur_user_data = db.get_user_data(message.from_user.id)
    #     if cur_user_data['invited_by'] is None:
    #         keyboard_markup = create_main_keyboard(cur_user_data)
    #         await message.reply("–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è' –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ", reply_markup=keyboard_markup)
    #         return
    #     else:
    #         inviter_user_data = db.get_user_data(cur_user_data['invited_by'])
    #         answer_text = "–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: " + str(inviter_user_data['user_id']) + "\n" + "–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: " + "@" + inviter_user_data['username']
    #         await message.answer(answer_text)

@dp.message_handler(text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: types.Message):
    try:
        await dp.throttle('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', rate=1)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_main_keyboard(cur_user_data)
        await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_markup)

# Cancel handler
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(text = "–û—Ç–º–µ–Ω–∞", state='*')
@dp.message_handler(text = '–ù–ï–¢', state='*')
async def cancel(message: types.Message, state: FSMContext):
    cur_user_data = db.get_user_data(message.from_user.id)
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info('Cancelling state %r', current_state)
    await state.finish()
    keyboard_markup = create_main_keyboard(cur_user_data)
    await message.reply("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard_markup)

# DEBUG
# @dp.message_handler(text = "DEBUG")
# async def send_debug(message: types.Message):
#         db.get_user_data(message.from_user.id)
#         await message.answer(message.from_user.id)
# DEBUG

# Payment methods read and change handler

@dp.message_handler(text = '‚ùì–ü–æ–º–æ—â—å')
async def view_help(message: types.Message):
    await message.reply('üí∏–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.\n[–ù–∞ –Ω–∏—Ö –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.]\n(–ë–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –°–ë–ü.)\n\nüì©–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.\n[–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –º—ã –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –ª—é–¥–µ–π.]\n\n‚ú®–°–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.\n[–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–∏]')

@dp.message_handler(text = 'üìù–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å-—É—Å–ª—É–≥.')
async def view_prices_handler(message: types.Message):
    db_prices_data = db.fetch_all_prices()
    price_names_list = ()
    for item in db_prices_data:
        price_names_list = price_names_list + (item[0],)
    inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=2 ,resize_keyboard= True)
    inline_buttons = (types.InlineKeyboardButton(name, callback_data=view_price_callback.new(action = 'view_item', item_name = name)) for name in price_names_list)
    inline_keyboard_markup.add(*inline_buttons)
    await message.reply("üõí –ö–∞—Ç–∞–ª–æ–≥\n[–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ Netflix/PlayStation+: @NetflixVoitheaBot]", reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(view_price_callback.filter(action = 'view_item'))
async def view_item_callback_handler(query: types.CallbackQuery, callback_data : dict):
    await query.answer()
    photo_path = "photos/" + callback_data['item_name'] + ".jpg"
    photo = InputFile(photo_path)
    inline_keyboard_markup = types.InlineKeyboardMarkup()
    inline_keyboard_markup.add(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data="–°–∫—Ä—ã—Ç—å"))
    await bot.send_photo(query.from_user.id, photo, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(text='–°–∫—Ä—ã—Ç—å')
async def hide_item_query_handler(query: types.CallbackQuery):
    await query.answer()
    await query.message.delete()


@dp.message_handler(text = '‚ú®–°–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.')
async def change_link_handler(message: types.Message):
    cur_alias = db.id_to_alias(message.from_user.id)
    inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard = True)
    inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='change_link')))
    if cur_alias == -1:
        await message.reply("–í—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=inline_keyboard_markup)
    else:
        message_text = "–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n" + await get_start_link(str(cur_alias))
        await message.reply(message_text, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(change_page_callback.filter(action = 'change_link'))
async def change_link_callback_handler(query: types.CallbackQuery, callback_data : dict):
    await query.answer()
    await change_link.link.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ 15 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: \nt.me/opom_voitheia_bot?start=–≤–∞—à_—Ç–µ–∫—Å—Ç", reply_markup=keyboard_markup)

@dp.message_handler(state=change_link.link)
async def method_change_correct(message: types.Message, state: FSMContext):
    cur_user_data = db.get_user_data(message.from_user.id)
    if len(message.text) > 15:
        await message.reply("–°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        if re.fullmatch(r'[A-Za-z0-9]+', message.text) and message.text != '':
            if db.alias_to_id(message.text) == -1:
                db.change_alias(message.from_user.id, message.text)
                await state.finish()
                keyboard_markup = create_main_keyboard(cur_user_data)
                await message.reply("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard_markup)
            else:
                await message.reply("–≠—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            await message.reply("–°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")


@dp.message_handler(text = "üí∏–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
async def check_change_payment_data(message: types.Message):
    try:
        await dp.throttle('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç', rate=1)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫', callback_data='payment_method'), types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='payment_data'))
        cur_user_data = db.get_user_data(message.from_user.id)
        answer_text = "–ë–∞–Ω–∫: " + cur_user_data['payment_method'] + "\n" + "–î–∞–Ω–Ω—ã–µ: " + cur_user_data["payment_data"]
        if cur_user_data['payment_data'] == '' and cur_user_data['payment_method'] == '':
            answer_text = '–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç" –∏–ª–∏ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é'
            keyboard_markup = create_main_keyboard(cur_user_data)
            await message.answer(answer_text, reply_markup= keyboard_markup)
            return
        await message.answer(answer_text, reply_markup=inline_keyboard_markup)

# Inline KB callback handler (payment_method)
@dp.callback_query_handler(text='payment_method')
async def inline_change_payment_method_handler(query: types.CallbackQuery):
    await payment_change.method.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –°–ë–ü)', reply_markup=keyboard_markup)
    await query.answer()

# Inline KB callback handler (payment_data)
@dp.callback_query_handler(text='payment_data')
async def inline_change_payment_data_handler(query: types.CallbackQuery):
    await payment_change.data.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å–æ –∑–Ω–∞–∫–∞ + –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)', reply_markup=keyboard_markup)
    await query.answer()

# Payment data change handler (INcorrect number)
@dp.message_handler(lambda message: not ((re.fullmatch(r'([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?', message.text) or message.text.isdigit()) and len(message.text) < 90), state=payment_change.data)
async def data_change_incorrect(message: types.Message, state: FSMContext):
    await message.reply('–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ +. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç')

# Payment data change handler (correct number)
@dp.message_handler(lambda message: (re.fullmatch(r'([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?', message.text) or message.text.isdigit()) and len(message.text) < 90, state=payment_change.data)
async def data_change_correct(message: types.Message, state: FSMContext):
    await state.finish()
    cur_user_data = db.get_user_data(message.from_user.id)
    db.change_user_payment_data(message.text, message.from_user.id)
    keyboard_markup = create_main_keyboard(cur_user_data)
    await message.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup= keyboard_markup)
    cur_user_data = db.get_user_data(message.from_user.id)
    inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫', callback_data='payment_method'), types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='payment_data'))
    answer_text = "–ë–∞–Ω–∫: " + cur_user_data['payment_method'] + "\n" + "–î–∞–Ω–Ω—ã–µ: " + cur_user_data["payment_data"]
    await message.answer(answer_text, reply_markup=inline_keyboard_markup)

# Payment method change handler (INcorrect length)
@dp.message_handler(lambda message: not len(message.text) < 30, state=payment_change.method)
async def method_change_incorrect(message: types.Message, state: FSMContext):
    await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')

# Payment method change handler (correct length)
@dp.message_handler(lambda message: len(message.text) < 30, state=payment_change.method)
async def method_change_correct(message: types.Message, state: FSMContext):
    await state.finish()
    cur_user_data = db.get_user_data(message.from_user.id)
    db.change_user_payment_method(message.text, message.from_user.id)
    keyboard_markup = create_main_keyboard(cur_user_data)
    await message.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup= keyboard_markup)
    cur_user_data = db.get_user_data(message.from_user.id)
    inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫', callback_data='payment_method'), types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='payment_data'))
    answer_text = "–ë–∞–Ω–∫: " + cur_user_data['payment_method'] + "\n" + "–î–∞–Ω–Ω—ã–µ: " + cur_user_data["payment_data"]
    await message.answer(answer_text, reply_markup=inline_keyboard_markup)

# Payment methods add handler
@dp.message_handler(text = "üí∏–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
async def add_payment_data(message: types.Message):
    try:
        await dp.throttle('–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç', rate=1)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        cur_user_data = db.get_user_data(message.from_user.id)
        if cur_user_data['payment_method'] != '' or cur_user_data['payment_data'] != '':
            await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç'")
            return
        await payment.method.set()
        keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
        keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –°–ë–ü)", reply_markup=keyboard_markup)

# Payment method add state handler (INcorrect length)
@dp.message_handler(lambda message: not len(message.text) < 30, state=payment.method)
async def method_add_incorrect(message: types.Message, state: FSMContext):
    await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')

# Payment method add state handler (correct length)
@dp.message_handler(lambda message: len(message.text) < 30, state=payment.method)
async def method_add_correct(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = message.text
    await payment.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å–æ –∑–Ω–∞–∫–∞ + –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)')

# Payment data add state handler (INcorrect number)
@dp.message_handler(lambda message: not ((re.fullmatch(r'([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?', message.text) or message.text.isdigit()) and len(message.text) < 90), state=payment.data)
async def data_add_incorrect(message: types.Message, state: FSMContext):
    await message.reply('–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ +. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç')

# Payment data add state handler (correct number)
@dp.message_handler(lambda message: (re.fullmatch(r'([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?', message.text) or message.text.isdigit()) and len(message.text) < 90, state=payment.data)
async def data_add_correct(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_data'] = message.text
        db.add_user_payment(data['payment_method'], data['payment_data'], message.from_user.id)
    await state.finish()
    cur_user_data = db.get_user_data(message.from_user.id)
    keyboard_markup = create_main_keyboard(cur_user_data)
    await message.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=keyboard_markup)

# Invite handler
@dp.message_handler(text = "üì©–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")
async def invite(message: types.Message):
    try:
        await dp.throttle('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', rate=1)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        cur_user_data = db.get_user_data(message.from_user.id)
        cur_user_alias = db.id_to_alias(cur_user_data['user_id'])
        if cur_user_alias == -1:
            answer_text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(cur_user_data['invited_users_amount']) + "\n" + "–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: " + str(cur_user_data['user_id']) + "\n" + "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: \n" + await get_start_link(str(cur_user_data['user_id']))
        else: 
            answer_text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(cur_user_data['invited_users_amount']) + "\n" + "–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: " + str(cur_user_data['user_id']) + "\n" + "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: \n" + await get_start_link(cur_user_alias)

        await message.reply(answer_text)

# Add inviter handler
@dp.message_handler(text = "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")
async def add_inviter_handler(message: types.Message):
    try:
        await dp.throttle('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è', rate=1)
    except Throttled:
        await message.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π')
    else:
        cur_user_data = db.get_user_data(message.from_user.id)
        if not (cur_user_data['invited_by'] is None):
            keyboard_markup = create_main_keyboard(cur_user_data)
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ", reply_markup=keyboard_markup)
            return
        await add_inviter.inviter.set()
        keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
        keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –±–µ–∑ –ø–æ–º–æ—â–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞", reply_markup=keyboard_markup)

@dp.message_handler(lambda message: not (message.text.isdigit()), state=add_inviter.inviter)
async def add_inviter_incorrect_format(message: types.Message, state: FSMContext):
    await message.reply("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")

@dp.message_handler(lambda message: message.text.isdigit(), state=add_inviter.inviter)
async def add_inviter_correct_format(message: types.Message, state: FSMContext):
    if db.check_user_exists(int(message.text)):
        if not (db.check_inviter_is_invited(message.from_user.id, int(message.text))):
            if message.from_user.id == int(message.text):
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")
            else:
                await state.finish()
                db.add_user_invited_by(int(message.text), message.from_user.id)
                cur_user_data = db.get_user_data(message.from_user.id)
                keyboard_markup = create_main_keyboard(cur_user_data)
                await message.reply("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º", reply_markup=keyboard_markup)
        else:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ—é—â–∏–π —ç—Ç–∏–º –∫–æ–¥–æ–º –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤–∞–º–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")

# Administration part ------------------------------------

@dp.message_handler(text = "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
async def show_admin_panel(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_admin_keyboard(cur_user_data)
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å", reply_markup=keyboard_markup)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(text = "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order_command_handler(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        await add_order.name.set()
        keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
        keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", reply_markup=keyboard_markup)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(state=add_order.name)
async def add_order_name_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await add_order.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ @DrmyDrmy")

@dp.message_handler(state=add_order.executor)
async def add_order_executor_handler(message: types.Message, state: FSMContext):
    if message.text[0] == "@": 
        async with state.proxy() as data:
            data['executor'] = message.text
        await add_order.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ @DrmyDrmy")
    else:
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(state=add_order.client)
async def add_order_client_handler(message: types.Message, state: FSMContext):
    if message.text[0] == "@": 
        async with state.proxy() as data:
            data['client'] = message.text
        await add_order.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ @DrmyDrmy")
    else: 
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(state=add_order.handler)
async def add_order_handler_handler(message: types.Message, state: FSMContext):
    if message.text[0] == "@": 
        async with state.proxy() as data:
            data['handler'] = message.text
        await add_order.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ 12,5, –±–µ–∑ –∑–Ω–∞–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
    else: 
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(state=add_order.system_percent)
async def add_order_system_percent_handler(message: types.Message, state: FSMContext):
    if re.fullmatch(r"[0-9]*\.[0-9]+", message.text.replace(',', '.')) or message.text.isdigit():
        async with state.proxy() as data:
            data['system_percent'] = message.text
        await add_order.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 12,5 –±–µ–∑ –∑–Ω–∞–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")

@dp.message_handler(state=add_order.executor_cost)
async def add_order_executor_cost_handler(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['executor_cost'] = message.text
            db.add_order(data['name'], data['executor'], data['client'], data['handler'], data['system_percent'], data['executor_cost'])
        await state.finish()
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_admin_keyboard(cur_user_data)
        await message.reply("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", reply_markup=keyboard_markup)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π")

@dp.message_handler(text = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def add_worker_handler(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        if db.get_super_admin_value(message.from_user.id) == 1:
            await add_worker.username.set()
            keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
            keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –ø—Ä–∏–º–µ—Ä: @DrmyDrmy. –í–ù–ò–ú–ê–ù–ò–ï, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!", reply_markup=keyboard_markup)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(lambda message: not (message.text[0] == '@'), state=add_worker.username)
async def add_worker_username_incorrect_handler(message: types.Message, state: FSMContext):
    await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(lambda message: message.text[0] == '@', state=add_worker.username)
async def add_worker_username_correct_handler(message: types.Message, state: FSMContext):
    if db.get_user_id_by_username(message.text) != -1:
        async with state.proxy() as data:
            data['user_id'] = db.get_user_id_by_username(message.text)
        await add_worker.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (–î–æ–ª–∂–Ω–æ—Å—Ç—å, –∏–º—è, –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")
    else:
        await message.reply(" –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. –û–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É start –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. \n –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(state=add_worker.user_data)
async def add_worker_user_data_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_info'] = message.text
    await add_worker.next()
    await message.reply("–î–æ–ª–∂–µ–Ω –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤? –í–≤–µ–¥–∏—Ç–µ '–î–ê' –∏–ª–∏ '–ù–ï–¢'")

@dp.message_handler(state=add_worker.is_superadmin)
async def add_worker_username_handler(message: types.Message, state: FSMContext):
    if message.text == "–î–ê" or message.text == "–ù–ï–¢":
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_admin_keyboard(cur_user_data)
        if message.text == "–î–ê":
            is_superadmin = 1
            async with state.proxy() as data:
                db.add_admin(data['user_id'], is_superadmin, data['user_info'])
            await state.finish()
            await message.reply("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É", reply_markup=keyboard_markup)
        if message.text == "–ù–ï–¢":
            is_superadmin = 0
            async with state.proxy() as data:
                db.add_admin(data['user_id'], is_superadmin, data['user_info'])
            await state.finish()
            await message.reply("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É", reply_markup=keyboard_markup)
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ '–î–ê' –∏–ª–∏ '–ù–ï–¢'")
    
@dp.message_handler(text = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö')
async def check_worker_handler(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        if db.get_super_admin_value(message.from_user.id) == 1:
            row_count = db.get_count_all_rows_admins()
            counter = 1
            answer_text = ''
            data = db.get_page_db_admins(ADMINS_LIMIT, 0)
            for user in data:
                list_user_data = db.get_user_data(user[0])
                if user[2] is None:
                    info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                else:
                    info = user[2]
                answer_text += '\n' + str(counter) + ". " + "@" + list_user_data['username'] + '\n' + info + '\n'
                counter += 1
            inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
            if row_count <= ADMINS_LIMIT:
                inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
                await message.answer(answer_text, reply_markup=inline_keyboard_markup)
            else:
                inline_keyboard_markup.add(types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='forward')))
                inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
                await message.answer(answer_text, reply_markup=inline_keyboard_markup)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.callback_query_handler(change_page_callback.filter(action = 'forward'))
async def next_page_admins_query_handler(query: types.CallbackQuery, callback_data : dict):
    row_count = db.get_count_all_rows_admins()
    offset = int(callback_data["offset"])
    answer_text = ''
    counter = offset + 1
    data = db.get_page_db_admins(ADMINS_LIMIT, offset)
    for user in data:
        list_user_data = db.get_user_data(user[0])
        if user[2] is None:
            info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            info = user[2]
        answer_text += '\n' + str(counter) + ". " + "@" + list_user_data['username'] + '\n' + info + '\n'
        counter += 1
    inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    buttons = [types.InlineKeyboardButton('<--', callback_data=change_page_callback.new(offset=offset - ADMINS_LIMIT, action='back'))]
    if row_count - offset > ADMINS_LIMIT:
        buttons.append(types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=offset + ADMINS_LIMIT, action='forward')))
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)
    else:
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(change_page_callback.filter(action = 'back'))
async def prev_page_admins_query_handler(query: types.CallbackQuery, callback_data : dict):
    offset = int(callback_data["offset"])
    answer_text = ''
    counter = offset + 1
    data = db.get_page_db_admins(ADMINS_LIMIT, offset)
    for user in data:
        list_user_data = db.get_user_data(user[0])
        if user[2] is None:
            info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            info = user[2]
        answer_text += '\n' + str(counter) + ". " + "@" + list_user_data['username'] + '\n' + info + '\n'
        counter += 1
    buttons = [
        types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=offset + ADMINS_LIMIT, action='forward')),
    ]
    inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    if offset > 0:
        buttons.insert(0, types.InlineKeyboardButton('<--', callback_data=change_page_callback.new(offset=offset - ADMINS_LIMIT, action='back')))
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)
    else:
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ', callback_data=change_page_callback.new(offset=ADMINS_LIMIT, action='change_info')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(change_page_callback.filter(action = 'change_info'))
async def change_info_admins_query_handler(query: types.CallbackQuery, callback_data : dict):
    await change_info.username.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ @DrmyDrmy", reply_markup=keyboard_markup)
    await query.answer()

@dp.message_handler(lambda message: not (message.text[0] == '@'), state=change_info.username)
async def change_info_username_incorrect_handler(message: types.Message, state: FSMContext):
    await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(lambda message: message.text[0] == '@', state=change_info.username)
async def change_info_username_correct_handler(message: types.Message, state: FSMContext):
    if db.get_user_id_by_username(message.text) != -1:
        async with state.proxy() as data:
            data['user_id'] = db.get_user_id_by_username(message.text)
        await change_info.next()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (–î–æ–ª–∂–Ω–æ—Å—Ç—å, –∏–º—è, –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(state=change_info.info)
async def change_info_info_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.change_info_admins(data['user_id'], message.text)
    await state.finish()
    cur_user_data = db.get_user_data(message.from_user.id)
    keyboard_markup = create_admin_keyboard(cur_user_data)
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=keyboard_markup)

@dp.message_handler(text = '–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
async def delete_user_handler(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        if db.get_super_admin_value(message.from_user.id) == 1:
            await delete_user.username.set()
            keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
            keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ @DrmyDrmy', reply_markup=keyboard_markup)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.message_handler(lambda message: not (message.text[0] == '@'), state=delete_user.username)
async def delete_user_incorrect_handler(message: types.Message, state: FSMContext):
    await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(lambda message: message.text[0] == '@', state=delete_user.username)
async def delete_user_correct_handler(message: types.Message, state: FSMContext):
    if db.get_user_id_by_username(message.text) != -1:
        async with state.proxy() as data:
            data['user_id'] = db.get_user_id_by_username(message.text)
        await delete_user.next()
        await message.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message_handler(lambda message: message.text == "–î–ê", state=delete_user.confirmation)
async def delete_user_confirmed_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.delete_admin(data['user_id'])
    await state.finish()
    cur_user_data = db.get_user_data(message.from_user.id)
    keyboard_markup = create_admin_keyboard(cur_user_data)
    await message.reply("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω.", reply_markup=keyboard_markup)

@dp.message_handler(text = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã')
async def check_all_orders_handler(message: types.Message):
    if db.check_user_is_admin(message.from_user.id):
        row_count = db.get_count_all_rows_orders()
        answer_text = ''
        data = db.get_page_db_orders(ORDERS_LIMIT, 0)
        for order in data:
            answer_text += '\n' + '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + str(order[0]) + "\n" + order[1] + '\n' + order[8] + '\n'
        inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        if row_count == 0:
            await message.reply("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
        else:
            if row_count <= ORDERS_LIMIT:
                inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
                inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
                await message.answer(answer_text, reply_markup=inline_keyboard_markup)
            else:
                inline_keyboard_markup.add(types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='forward_order')))
                inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
                inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
                await message.answer(answer_text, reply_markup=inline_keyboard_markup)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@dp.callback_query_handler(change_page_callback.filter(action = 'forward_order'))
async def next_page_orders_query_handler(query: types.CallbackQuery, callback_data : dict):
    row_count = db.get_count_all_rows_orders()
    offset = int(callback_data["offset"])
    answer_text = ''
    data = db.get_page_db_orders(ORDERS_LIMIT, offset)
    for order in data:
        answer_text += '\n' + '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + str(order[0]) + "\n" + order[1] + '\n' + order[8] + '\n'
    inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    buttons = [types.InlineKeyboardButton('<--', callback_data=change_page_callback.new(offset=offset - ORDERS_LIMIT, action='back_order'))]
    if row_count - offset > ORDERS_LIMIT:
        buttons.append(types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=offset + ORDERS_LIMIT, action='forward_order')))
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
        inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)
    else:
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
        inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(change_page_callback.filter(action = 'back_order'))
async def prev_page_orders_query_handler(query: types.CallbackQuery, callback_data : dict):
    offset = int(callback_data["offset"])
    answer_text = ''
    data = db.get_page_db_orders(ORDERS_LIMIT, offset)
    for order in data:
        answer_text += '\n' + '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + str(order[0]) + "\n" + order[1] + '\n' + order[8] + '\n'
    buttons = [
        types.InlineKeyboardButton('-->', callback_data=change_page_callback.new(offset=offset + ORDERS_LIMIT, action='forward_order')),
    ]
    inline_keyboard_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    if offset > 0:
        buttons.insert(0, types.InlineKeyboardButton('<--', callback_data=change_page_callback.new(offset=offset - ORDERS_LIMIT, action='back_order')))
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
        inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)
    else:
        inline_keyboard_markup.add(*buttons)
        inline_keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='view_order')))
        inline_keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=change_page_callback.new(offset=ORDERS_LIMIT, action='delete_order')))
        await query.answer()
        await bot.delete_message(query.message.chat.id, query.message.message_id)
        await bot.send_message(query.from_user.id, answer_text, reply_markup=inline_keyboard_markup)

@dp.callback_query_handler(change_page_callback.filter(action = 'delete_order'))
async def delete_order_query_handler(query: types.CallbackQuery, callback_data : dict):
    await query.answer()
    await delete_order.order_id.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", reply_markup=keyboard_markup)

@dp.message_handler(lambda message: not (message.text.isdigit()), state=delete_order.order_id)
async def delete_order_incorrect_handler(message: types.Message, state: FSMContext):
    await message.reply("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")

@dp.message_handler(lambda message: message.text.isdigit(), state=delete_order.order_id)
async def delete_order_correct_handler(message: types.Message, state: FSMContext):
    if db.check_order_exists(int(message.text)):
        async with state.proxy() as data:
            data['order_id'] = int(message.text)
        await delete_order.next()
        await message.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ '–î–ê' –∏–ª–∏ '–ù–ï–¢'")
    else:
        await message.reply('–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')

@dp.message_handler(state=delete_order.confirmation)
async def delete_order_confirmation_handler(message: types.Message, state: FSMContext):
    cur_user_data = db.get_user_data(message.from_user.id)
    if message.text == '–î–ê':
        async with state.proxy() as data:
            db.delete_order(data['order_id'])
        await state.finish()
        keyboard_markup = create_admin_keyboard(cur_user_data)
        await message.reply("–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω", reply_markup=keyboard_markup)
    else:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ '–î–ê' –∏–ª–∏ '–ù–ï–¢'")

@dp.callback_query_handler(change_page_callback.filter(action = 'view_order'))
async def view_orders_query_handler(query: types.CallbackQuery, callback_data : dict):
    await query.answer()
    await view_order.view.set()
    keyboard_markup = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", reply_markup=keyboard_markup)

@dp.message_handler(lambda message: not (message.text.isdigit()), state=view_order.view)
async def view_order_incorrect_handler(message: types.Message, state: FSMContext):
    await message.reply("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")

@dp.message_handler(lambda message: message.text.isdigit(), state=view_order.view)
async def view_order_correct_handler(message: types.Message, state: FSMContext):
    if db.check_order_exists(int(message.text)):
        cur_user_data = db.get_user_data(message.from_user.id)
        keyboard_markup = create_admin_keyboard(cur_user_data)
        answer_text = ''
        order_data = db.get_order_data(int(message.text))
        order_sum_data = divide_money(order_data[6], order_data[5])
        order_count_by = db.get_count_orders_by(order_data[3])
        if order_data[7] is None:
            inviter = "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            inviter_data = db.get_user_data(order_data[7])
            inviter = "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: " + "@" + inviter_data['username'] + "\n" + "–ë–∞–Ω–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: " + inviter_data['payment_method'] + "\n" + "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: " + inviter_data['payment_data']
        if order_count_by > 3:
            inviter = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∏–ª –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö –∑–∞–∫–∞–∑–æ–≤. –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ —Å–∫—Ä—ã—Ç—ã"
        answer_text += "–ù–æ–º–µ—Ä: " + str(order_data[0]) + "\n"
        answer_text += "–ù–∞–∑–≤–∞–Ω–∏–µ: " + order_data[1] + "\n"
        answer_text += "–î–∞—Ç–∞: " + order_data[8] + "\n"
        answer_text += "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: " + "@" + order_data[2] + "\n"
        answer_text += "–ó–∞–∫–∞–∑—á–∏–∫: " + "@" + order_data[3] + "\n"
        answer_text += "–°–æ—Ç—Ä—É–¥–Ω–∏–∫: " + "@" + order_data[4] + "\n"
        answer_text += "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã: " + str(order_data[5]) + "%" + "\n"
        answer_text += "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: " + str(order_data[6]) + "\n"
        if not(order_data[7] is None) and order_count_by <= 3:
            answer_text += "–°—É–º–º–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞: " + str(order_sum_data['sum_for_boss_and_first']) + "\n"
            answer_text += "–°—É–º–º–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: " + str(order_sum_data['inviter_sum']) + "\n"
        else:
            answer_text += "–°—É–º–º–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞: " + str(order_sum_data['sum_for_boss_and_first'] + order_sum_data['inviter_sum']) + "\n"
        answer_text += "–°—É–º–º–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: " + str(order_sum_data['others_sum']) + '\n'
        answer_text += inviter
        await state.finish()
        await message.reply(answer_text, reply_markup=keyboard_markup)
    else:
        await message.reply("–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")

# Default handler
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é")
    

# Polling start
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)